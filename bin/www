#!/usr/bin/env node

/**
 * Module dependencies.
 */
const debug = require('debug')('ojlinks-api:server');
const http = require('http');
const config = require('config');
const socketIO = require("socket.io");
const axios = require("axios");

const app = require('../app');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.get('app.port') || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/** Setup Socket Server */
const io = socketIO(server);

const getApiAndEmit = async socket => {
    try {
      const seconds = new Date().getSeconds();
      let temperature;
      if (process.env.NODE_ENV == "production" && (seconds < 20 || seconds >= 50  )) {
        const res = await axios.get(`https://api.darksky.net/forecast/${config.get("app.darkSkyAPIKey")}/43.7695,11.2558`);
        temperature = res.data.currently.temperature;       
      } else {       
        temperature = 0;
        for(let i = 0; i < 4; i++) {
          temperature += Math.round(Math.random() * 10); 
        }      
      }
      //console.log(`Temperature: ${temperature}`);
      socket.emit("FromAPI", temperature); 
    } catch (error) {
        console.error(`Error: ${error}`);
        return (Math.random() * 10) + (Math.random() * 10) + (Math.random() * 10);
    }
}

let interval;
io.on("connection", socket => {
  const {nsp, server, adapter, id, client, conn, rooms, acks, connected, disconnected, handshake, fns, flags, _rooms} = socket;
  console.log(`New client connected: ${socket.id}`);
  if (interval) {
    clearInterval(interval);
  }
  interval = setInterval(() => getApiAndEmit(socket), 10000);
  socket.on("disconnect", () => console.log(`Client disconnected ${socket.id}`));
  socket.on('pingMsg', msg => {
  console.log('ping', msg)
  const reverseMsg = msg.split("").reverse().join("");
    socket.emit('pongMsg', `- ${reverseMsg}`);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`Server is running on port ${port}`));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
